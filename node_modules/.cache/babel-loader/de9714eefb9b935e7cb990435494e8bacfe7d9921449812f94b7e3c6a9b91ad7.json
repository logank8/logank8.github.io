{"ast":null,"code":"var _jsxFileName = \"/Users/erinkeener/Downloads/GitHub/testrepo-1/src/pages/education.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport Circle from './Circle/index';\nimport ReactDOM from 'react-dom';\nimport { objectTypeCallProperty } from '@babel/types';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction returnCourses(courses) {\n  let container = /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 21\n  }, this);\n  var circles = [];\n  courses.forEach(course => {\n    circles.push(/*#__PURE__*/_jsxDEV(Circle, {\n      title: course.title,\n      code: course.code,\n      description: course.description\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 22\n    }, this));\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: \"flex\"\n    },\n    children: circles\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 12\n  }, this);\n}\n;\n\n// since the entire thing has apparently been converted to string:\n// we iterate it over similarly to an array of chars, using { and } as signifiers of the beginning and end of an object. \n// from there we might be able to use JSON.parse\n\nfunction parseCourses(data) {\n  const text = String(data);\n  // return an array of JSON objects\n  var courseObjects = [];\n  var inObj = false;\n  let objtext = \"\";\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] === '[' || text[i] === '[') {\n      continue;\n    }\n    if (text[i] === '{' && !inObj) {\n      inObj = true;\n      objtext = objtext.concat(text[i]);\n    } else if (text[i] === ',' && inObj && text[i] === '}') {\n      const obj = JSON.parse(objtext);\n      courseObjects.push(obj);\n      inObj = false;\n      objtext = \"\";\n    } else if (inObj) {\n      objtext = objtext.concat(text[i]);\n    }\n  }\n  return courseObjects;\n}\n;\nconst Education = () => {\n  _s();\n  const [message, setMessage] = useState('');\n  useEffect(() => {\n    // eventually will have to change this to permanent server host endpoint\n    fetch('http://localhost:3306/education').then(res => res.text()).then(data => setMessage(data)).catch(err => console.log(err));\n  }, []);\n  const courses2 = parseCourses(message);\n  console.log(courses2);\n  const courses = [{\n    title: 'Seminar I',\n    code: 'FS100',\n    description: 'A class with assorted general readings'\n  }, {\n    title: 'Seminar II',\n    code: 'FS101',\n    description: 'A class with more assorted general readings'\n  }, {\n    title: 'Calculus 3',\n    code: 'MATH200',\n    description: 'Vectors and 3-dimensional integrals'\n  }, {\n    title: 'Introduction to Computing',\n    code: 'CPSC110',\n    description: 'The very first introductory class at UBC on computer programming.'\n  }, {\n    title: 'Video Game Programming',\n    code: 'CPSC427',\n    description: 'A class on game programming with a term-long group project to make a game.'\n  }];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      fontFamily: 'serif'\n    },\n    children: returnCourses(courses)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 9\n  }, this);\n  // TODO:\n  // specify circle container in here\n  // parse db response and display\n};\n_s(Education, \"3v4ozrfWvlmZ97O5zgyhgDZKC+M=\");\n_c = Education;\nexport default Education;\nvar _c;\n$RefreshReg$(_c, \"Education\");","map":{"version":3,"names":["React","useEffect","useState","Circle","ReactDOM","objectTypeCallProperty","jsxDEV","_jsxDEV","returnCourses","courses","container","fileName","_jsxFileName","lineNumber","columnNumber","circles","forEach","course","push","title","code","description","style","display","children","parseCourses","data","text","String","courseObjects","inObj","objtext","i","length","concat","obj","JSON","parse","Education","_s","message","setMessage","fetch","then","res","catch","err","console","log","courses2","fontFamily","_c","$RefreshReg$"],"sources":["/Users/erinkeener/Downloads/GitHub/testrepo-1/src/pages/education.js"],"sourcesContent":["import React, {useEffect, useState} from 'react';\nimport Circle from './Circle/index';\nimport ReactDOM from 'react-dom';\nimport { objectTypeCallProperty } from '@babel/types';\n\n\nfunction returnCourses(courses) {\n    let container = <div></div>;\n    var circles = [];\n\n    courses.forEach((course) => {\n        circles.push(<Circle title={course.title} code={course.code} description={course.description} />);\n    });\n\n    return <div style={{\n        display: \"flex\"\n    }}>{circles}</div>;\n};\n\n// since the entire thing has apparently been converted to string:\n// we iterate it over similarly to an array of chars, using { and } as signifiers of the beginning and end of an object. \n// from there we might be able to use JSON.parse\n\nfunction parseCourses(data) {\n    const text = String(data);\n    // return an array of JSON objects\n    var courseObjects = [];\n\n    var inObj = false;\n    let objtext = \"\";\n    for (let i = 0; i < text.length; i++) {\n        if ((text[i] === '[') || (text[i] === '[')) {\n            continue;\n        } \n        if ((text[i] === '{') && (!inObj)) {\n            inObj = true;\n            objtext = objtext.concat(text[i]);\n        } else if ((text[i] === ',') && (inObj) && (text[i] === '}')) {\n            const obj = JSON.parse(objtext);\n            courseObjects.push(obj);\n            inObj = false;\n            objtext = \"\";\n        } else if (inObj) {\n            objtext = objtext.concat(text[i]);\n        }\n    }\n\n    return courseObjects;\n};\n\n\nconst Education = () => {\n    const [message, setMessage] = useState('');\n    useEffect(() => { // eventually will have to change this to permanent server host endpoint\n    fetch('http://localhost:3306/education')\n      .then((res) => res.text())\n      .then((data) => setMessage(data))\n      .catch((err) => console.log(err));\n  }, []);\n\n    const courses2 = parseCourses(message);\n    console.log(courses2);\n\n    const courses = [{\n        title: 'Seminar I',\n        code: 'FS100',\n        description: 'A class with assorted general readings'\n    }, {\n        title: 'Seminar II',\n        code: 'FS101',\n        description: 'A class with more assorted general readings'\n    }, {\n        title: 'Calculus 3',\n        code: 'MATH200',\n        description: 'Vectors and 3-dimensional integrals'\n    }, {\n        title: 'Introduction to Computing',\n        code: 'CPSC110',\n        description: 'The very first introductory class at UBC on computer programming.'\n    }, {\n        title: 'Video Game Programming',\n        code: 'CPSC427',\n        description: 'A class on game programming with a term-long group project to make a game.'\n    }];\n\n\n\n    return (\n        <div \n            style={{\n                fontFamily: 'serif'\n            }}\n        >\n            {returnCourses(courses)}\n        </div>\n    );\n    // TODO:\n    // specify circle container in here\n    // parse db response and display\n};\n\nexport default Education;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}